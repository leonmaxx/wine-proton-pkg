diff -purN a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
--- a/dlls/ntdll/loader.c	2024-12-19 13:08:33.367596445 +0200
+++ b/dlls/ntdll/loader.c	2024-12-19 13:12:33.799631567 +0200
@@ -2350,17 +2350,12 @@ static NTSTATUS build_module( LPCWSTR lo
                               DWORD flags, BOOL system, WINE_MODREF **pwm )
 {
     static const char builtin_signature[] = "Wine builtin DLL";
-    static HMODULE lsteamclient = NULL;
     char *signature = (char *)((IMAGE_DOS_HEADER *)*module + 1);
-    UNICODE_STRING lsteamclient_us;
     BOOL is_builtin;
     IMAGE_NT_HEADERS *nt;
     WINE_MODREF *wm;
     NTSTATUS status;
     SIZE_T map_size;
-    WCHAR *basename, *tmp;
-    ULONG basename_len;
-    BOOL is_steamclient32;
 
     if (!(nt = RtlImageNtHeader( *module ))) return STATUS_INVALID_IMAGE_FORMAT;
 
@@ -2381,50 +2376,6 @@ static NTSTATUS build_module( LPCWSTR lo
 
     update_load_config( *module );
 
-    basename = nt_name->Buffer;
-    if ((tmp = wcsrchr(basename, '\\'))) basename = tmp + 1;
-    if ((tmp = wcsrchr(basename, '/'))) basename = tmp + 1;
-    basename_len = wcslen(basename);
-    if (basename_len >= 4 && !wcscmp(basename + basename_len - 4, L".dll")) basename_len -= 4;
-
-    if (use_lsteamclient() && ((is_steamclient32 = !RtlCompareUnicodeStrings(basename, basename_len, L"steamclient", 11, TRUE)) ||
-         !RtlCompareUnicodeStrings(basename, basename_len, L"steamclient64", 13, TRUE) ||
-         !RtlCompareUnicodeStrings(basename, basename_len, L"gameoverlayrenderer", 19, TRUE) ||
-         !RtlCompareUnicodeStrings(basename, basename_len, L"gameoverlayrenderer64", 21, TRUE)) &&
-        RtlCreateUnicodeStringFromAsciiz(&lsteamclient_us, "lsteamclient.dll") &&
-        (lsteamclient || LdrLoadDll(load_path, 0, &lsteamclient_us, &lsteamclient) == STATUS_SUCCESS))
-    {
-        struct steamclient_setup_trampolines_params params = {.src_mod = *module, .tgt_mod = lsteamclient};
-        WINE_UNIX_CALL( unix_steamclient_setup_trampolines, &params );
-        wm->ldr.Flags |= LDR_DONT_RESOLVE_REFS;
-        flags |= DONT_RESOLVE_DLL_REFERENCES;
-        if (is_steamclient32)
-        {
-            OBJECT_ATTRIBUTES attr;
-            void *addr = *module;
-            SIZE_T size = 0x1000;
-            LARGE_INTEGER offset;
-            IO_STATUS_BLOCK io;
-            DWORD protect_old;
-            HANDLE file;
-
-            NtProtectVirtualMemory( NtCurrentProcess(), &addr, &size, PAGE_READWRITE, &protect_old );
-            memset( &attr, 0, sizeof(attr) );
-            attr.Length = sizeof(attr);
-            attr.Attributes = OBJ_CASE_INSENSITIVE;
-            attr.ObjectName = (UNICODE_STRING *)nt_name;
-            NtOpenFile( &file, GENERIC_READ | SYNCHRONIZE, &attr, &io,
-                        FILE_SHARE_READ | FILE_SHARE_DELETE,
-                        FILE_SYNCHRONOUS_IO_NONALERT | FILE_NON_DIRECTORY_FILE );
-            offset.QuadPart = (ULONG_PTR)&nt->OptionalHeader.ImageBase - (ULONG_PTR)addr;
-            NtReadFile( file, 0, NULL, NULL, &io, &nt->OptionalHeader.ImageBase,
-                        sizeof(nt->OptionalHeader.ImageBase), &offset, NULL );
-            NtClose( file );
-            TRACE( "steamclient ImageBase %#Ix.\n", nt->OptionalHeader.ImageBase );
-            NtProtectVirtualMemory( NtCurrentProcess(), &addr, &size, protect_old, &protect_old );
-        }
-    }
-
     /* fixup imports */
 
     if (!(flags & DONT_RESOLVE_DLL_REFERENCES) &&
diff -purN a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
--- a/dlls/ntdll/unix/loader.c	2024-12-19 13:08:33.380929891 +0200
+++ b/dlls/ntdll/unix/loader.c	2024-12-19 13:10:22.511853751 +0200
@@ -1047,96 +1047,6 @@ static NTSTATUS load_so_dll( void *args
     return status;
 }
 
-static void *steamclient_srcs[128];
-static void *steamclient_tgts[128];
-static int steamclient_count;
-
-void *steamclient_handle_fault( LPCVOID addr, DWORD err )
-{
-    int i;
-
-    if (!(err & EXCEPTION_EXECUTE_FAULT)) return NULL;
-
-    for (i = 0; i < steamclient_count; ++i)
-    {
-        if (addr == steamclient_srcs[i])
-            return steamclient_tgts[i];
-    }
-
-    return NULL;
-}
-
-static void steamclient_write_jump(void *src_addr, void *tgt_addr)
-{
-#ifdef _WIN64
-    static const char mov[] = {0x48, 0xb8};
-#else
-    static const char mov[] = {0xb8};
-#endif
-    static const char jmp[] = {0xff, 0xe0};
-    memcpy(src_addr, mov, sizeof(mov));
-    memcpy((char *)src_addr + sizeof(mov), &tgt_addr, sizeof(tgt_addr));
-    memcpy((char *)src_addr + sizeof(mov) + sizeof(tgt_addr), jmp, sizeof(jmp));
-}
-
-static NTSTATUS steamclient_setup_trampolines( void *args )
-{
-    static int noexec_cached = -1;
-    struct steamclient_setup_trampolines_params *params = args;
-    HMODULE src_mod = params->src_mod, tgt_mod = params->tgt_mod;
-    SYSTEM_BASIC_INFORMATION info;
-    IMAGE_NT_HEADERS *src_nt = (IMAGE_NT_HEADERS *)((UINT_PTR)src_mod + ((IMAGE_DOS_HEADER *)src_mod)->e_lfanew);
-    IMAGE_NT_HEADERS *tgt_nt = (IMAGE_NT_HEADERS *)((UINT_PTR)tgt_mod + ((IMAGE_DOS_HEADER *)tgt_mod)->e_lfanew);
-    IMAGE_SECTION_HEADER *src_sec = (IMAGE_SECTION_HEADER *)(src_nt + 1);
-    const IMAGE_EXPORT_DIRECTORY *src_exp, *tgt_exp;
-    const DWORD *names;
-    SIZE_T size;
-    void *addr, *src_addr, *tgt_addr;
-    char *name, *wsne;
-    UINT_PTR page_mask;
-    int i;
-
-    if (noexec_cached == -1)
-        noexec_cached = (wsne = getenv("WINESTEAMNOEXEC")) && atoi(wsne);
-
-    virtual_get_system_info( &info, !!NtCurrentTeb()->WowTebOffset );
-    page_mask = info.PageSize - 1;
-
-    for (i = 0; i < src_nt->FileHeader.NumberOfSections; ++i)
-    {
-        if (memcmp(src_sec[i].Name, ".text", 5)) continue;
-        addr = (void *)(((UINT_PTR)src_mod + src_sec[i].VirtualAddress) & ~page_mask);
-        size = (src_sec[i].Misc.VirtualSize + page_mask) & ~page_mask;
-        if (noexec_cached) mprotect(addr, size, PROT_READ);
-        else mprotect(addr, size, PROT_READ|PROT_WRITE|PROT_EXEC);
-    }
-
-    src_exp = get_module_data_dir( src_mod, IMAGE_FILE_EXPORT_DIRECTORY, NULL );
-    tgt_exp = get_module_data_dir( tgt_mod, IMAGE_FILE_EXPORT_DIRECTORY, NULL );
-    names = (const DWORD *)((UINT_PTR)src_mod + src_exp->AddressOfNames);
-    for (i = 0; i < src_exp->NumberOfNames; ++i)
-    {
-        if (!names[i] || !(name = (char *)((UINT_PTR)src_mod + names[i]))) continue;
-        if (!(src_addr = (void *)find_named_export(src_mod, src_exp, name))) continue;
-        if (!(tgt_addr = (void *)find_named_export(tgt_mod, tgt_exp, name))) continue;
-        assert(steamclient_count < ARRAY_SIZE(steamclient_srcs));
-        steamclient_srcs[steamclient_count] = src_addr;
-        steamclient_tgts[steamclient_count] = tgt_addr;
-        if (!noexec_cached) steamclient_write_jump(src_addr, tgt_addr);
-        else steamclient_count++;
-    }
-
-    src_addr = (void *)((UINT_PTR)src_mod + src_nt->OptionalHeader.AddressOfEntryPoint);
-    tgt_addr = (void *)((UINT_PTR)tgt_mod + tgt_nt->OptionalHeader.AddressOfEntryPoint);
-    assert(steamclient_count < ARRAY_SIZE(steamclient_srcs));
-    steamclient_srcs[steamclient_count] = src_addr;
-    steamclient_tgts[steamclient_count] = tgt_addr;
-    if (!noexec_cached) steamclient_write_jump(src_addr, tgt_addr);
-    else steamclient_count++;
-
-    return STATUS_SUCCESS;
-}
-
 static BOOL debugstr_pc_impl( void *pc, char *buffer, unsigned int size )
 {
     unsigned int len;
@@ -1198,7 +1108,6 @@ static const unixlib_entry_t unix_call_f
     unixcall_wine_server_handle_to_fd,
     unixcall_wine_spawnvp,
     system_time_precise,
-    steamclient_setup_trampolines,
     is_pc_in_native_so,
     debugstr_pc,
 };
diff -purN a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
--- a/dlls/ntdll/unix/signal_i386.c	2024-12-19 13:08:33.384263253 +0200
+++ b/dlls/ntdll/unix/signal_i386.c	2024-12-19 13:10:22.511853751 +0200
@@ -1927,7 +1927,6 @@ static void segv_handler( int signal, si
     struct xcontext xcontext;
     ucontext_t *ucontext = sigcontext;
     void *stack = setup_exception_record( sigcontext, &rec, &xcontext );
-    void *steamclient_addr = NULL;
 
     switch (TRAP_sig(ucontext))
     {
@@ -1962,12 +1961,6 @@ static void segv_handler( int signal, si
         }
         break;
     case TRAP_x86_PAGEFLT:  /* Page fault */
-        if ((steamclient_addr = steamclient_handle_fault( siginfo->si_addr, (ERROR_sig(ucontext) >> 1) & 0x09 )))
-        {
-            EIP_sig(ucontext) = (intptr_t)steamclient_addr;
-            return;
-        }
-
         rec.NumberParameters = 2;
         rec.ExceptionInformation[0] = (ERROR_sig(ucontext) >> 1) & 0x09;
         rec.ExceptionInformation[1] = (ULONG_PTR)siginfo->si_addr;
diff -purN a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
--- a/dlls/ntdll/unix/signal_x86_64.c	2024-12-19 13:08:33.384263253 +0200
+++ b/dlls/ntdll/unix/signal_x86_64.c	2024-12-19 13:14:49.050776005 +0200
@@ -2315,7 +2315,7 @@ static void segv_handler( int signal, si
     EXCEPTION_RECORD rec = { 0 };
     struct xcontext context;
     ucontext_t *ucontext = init_handler( sigcontext );
-    void *steamclient_addr = NULL;
+    void *dummy = NULL;
 
     rec.ExceptionAddress = (void *)RIP_sig(ucontext);
     save_context( &context, ucontext );
@@ -2347,12 +2347,6 @@ static void segv_handler( int signal, si
         }
         break;
     case TRAP_x86_PAGEFLT:  /* Page fault */
-        if ((steamclient_addr = steamclient_handle_fault( siginfo->si_addr, (ERROR_sig(ucontext) >> 1) & 0x09 )))
-        {
-            RIP_sig(ucontext) = (intptr_t)steamclient_addr;
-            return;
-        }
-
         rec.NumberParameters = 2;
         rec.ExceptionInformation[0] = (ERROR_sig(ucontext) >> 1) & 0x09;
         rec.ExceptionInformation[1] = (ULONG_PTR)siginfo->si_addr;
diff -purN a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
--- a/dlls/ntdll/unix/unix_private.h	2024-12-19 13:08:33.384263253 +0200
+++ b/dlls/ntdll/unix/unix_private.h	2024-12-19 13:15:57.661356482 +0200
@@ -268,7 +268,6 @@ extern unsigned int alloc_object_attribu
                                              data_size_t *ret_len );
 extern NTSTATUS system_time_precise( void *args );
 
-extern void *steamclient_handle_fault( LPCVOID addr, DWORD err );
 extern void *anon_mmap_fixed( void *start, size_t size, int prot, int flags );
 extern void *anon_mmap_alloc( size_t size, int prot );
 extern void virtual_init(void);
diff -purN a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
--- a/dlls/ntdll/unixlib.h	2024-12-19 13:08:33.384263253 +0200
+++ b/dlls/ntdll/unixlib.h	2024-12-19 13:10:22.515187112 +0200
@@ -66,12 +66,6 @@ struct unwind_builtin_dll_params
     CONTEXT                    *context;
 };
 
-struct steamclient_setup_trampolines_params
-{
-    HMODULE src_mod;
-    HMODULE tgt_mod;
-};
-
 struct debugstr_pc_args
 {
     void *pc;
@@ -89,7 +83,6 @@ enum ntdll_unix_funcs
     unix_wine_server_handle_to_fd,
     unix_wine_spawnvp,
     unix_system_time_precise,
-    unix_steamclient_setup_trampolines,
     unix_is_pc_in_native_so,
     unix_debugstr_pc,
 };
